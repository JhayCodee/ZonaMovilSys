//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Datos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Contexto : DbContext
    {
        public Contexto()
            : base("name=Contexto")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Categoria> Categoria { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Color> Color { get; set; }
        public virtual DbSet<Marca> Marca { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<Controlador> Controlador { get; set; }
        public virtual DbSet<Modulo> Modulo { get; set; }
        public virtual DbSet<Operacion> Operacion { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<RolOperacion> RolOperacion { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<DetalleFacturaVenta> DetalleFacturaVenta { get; set; }
        public virtual DbSet<FacturaVenta> FacturaVenta { get; set; }
        public virtual DbSet<Garantia> Garantia { get; set; }
        public virtual DbSet<EventosGarantia> EventosGarantia { get; set; }
        public virtual DbSet<Departamento> Departamento { get; set; }
        public virtual DbSet<UnidadMedida> UnidadMedida { get; set; }
        public virtual DbSet<ValoresUnidadMedida> ValoresUnidadMedida { get; set; }
    
        public virtual int sp_Usuario_Create(string nombre, string apellidos, string nombreUsuario, string correo, Nullable<int> idRol, Nullable<bool> activo, string contrasena, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("IdRol", idRol) :
                new ObjectParameter("IdRol", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Usuario_Create", nombreParameter, apellidosParameter, nombreUsuarioParameter, correoParameter, idRolParameter, activoParameter, contrasenaParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Usuario_Delete(Nullable<int> idUsuario, ObjectParameter isSuccess)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Usuario_Delete", idUsuarioParameter, isSuccess);
        }
    
        public virtual int sp_Usuario_Update(Nullable<int> idUsuario, string nombre, string apellidos, string nombreUsuario, string correo, Nullable<int> idRol, Nullable<bool> activo, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("IdRol", idRol) :
                new ObjectParameter("IdRol", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Usuario_Update", idUsuarioParameter, nombreParameter, apellidosParameter, nombreUsuarioParameter, correoParameter, idRolParameter, activoParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Producto_Create(string nombre, string modelo, string descripcion, Nullable<int> stock, Nullable<decimal> precioCompra, Nullable<decimal> precioVenta, Nullable<int> almacenamiento, Nullable<int> garantiaMeses, Nullable<int> rAM, Nullable<bool> activo, Nullable<int> idMarca, Nullable<int> idCategoria, Nullable<int> idColor, Nullable<int> bateria, Nullable<bool> nuevo, Nullable<bool> eSim, Nullable<int> idProveedor, string iMEI, string codigoBarra, Nullable<int> creadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("Modelo", modelo) :
                new ObjectParameter("Modelo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            var precioCompraParameter = precioCompra.HasValue ?
                new ObjectParameter("PrecioCompra", precioCompra) :
                new ObjectParameter("PrecioCompra", typeof(decimal));
    
            var precioVentaParameter = precioVenta.HasValue ?
                new ObjectParameter("PrecioVenta", precioVenta) :
                new ObjectParameter("PrecioVenta", typeof(decimal));
    
            var almacenamientoParameter = almacenamiento.HasValue ?
                new ObjectParameter("Almacenamiento", almacenamiento) :
                new ObjectParameter("Almacenamiento", typeof(int));
    
            var garantiaMesesParameter = garantiaMeses.HasValue ?
                new ObjectParameter("GarantiaMeses", garantiaMeses) :
                new ObjectParameter("GarantiaMeses", typeof(int));
    
            var rAMParameter = rAM.HasValue ?
                new ObjectParameter("RAM", rAM) :
                new ObjectParameter("RAM", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            var idColorParameter = idColor.HasValue ?
                new ObjectParameter("IdColor", idColor) :
                new ObjectParameter("IdColor", typeof(int));
    
            var bateriaParameter = bateria.HasValue ?
                new ObjectParameter("Bateria", bateria) :
                new ObjectParameter("Bateria", typeof(int));
    
            var nuevoParameter = nuevo.HasValue ?
                new ObjectParameter("Nuevo", nuevo) :
                new ObjectParameter("Nuevo", typeof(bool));
    
            var eSimParameter = eSim.HasValue ?
                new ObjectParameter("eSim", eSim) :
                new ObjectParameter("eSim", typeof(bool));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var iMEIParameter = iMEI != null ?
                new ObjectParameter("IMEI", iMEI) :
                new ObjectParameter("IMEI", typeof(string));
    
            var codigoBarraParameter = codigoBarra != null ?
                new ObjectParameter("CodigoBarra", codigoBarra) :
                new ObjectParameter("CodigoBarra", typeof(string));
    
            var creadoPorParameter = creadoPor.HasValue ?
                new ObjectParameter("CreadoPor", creadoPor) :
                new ObjectParameter("CreadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Producto_Create", nombreParameter, modeloParameter, descripcionParameter, stockParameter, precioCompraParameter, precioVentaParameter, almacenamientoParameter, garantiaMesesParameter, rAMParameter, activoParameter, idMarcaParameter, idCategoriaParameter, idColorParameter, bateriaParameter, nuevoParameter, eSimParameter, idProveedorParameter, iMEIParameter, codigoBarraParameter, creadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Producto_Delete(Nullable<int> idProducto, Nullable<int> eliminadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var eliminadoPorParameter = eliminadoPor.HasValue ?
                new ObjectParameter("EliminadoPor", eliminadoPor) :
                new ObjectParameter("EliminadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Producto_Delete", idProductoParameter, eliminadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Producto_Update(Nullable<int> idProducto, string nombre, string modelo, string descripcion, Nullable<int> stock, Nullable<decimal> precioCompra, Nullable<decimal> precioVenta, string almacenamiento, Nullable<int> garantiaMeses, string rAM, Nullable<bool> activo, Nullable<int> idMarca, Nullable<int> idCategoria, Nullable<int> idColor, Nullable<int> editadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("Modelo", modelo) :
                new ObjectParameter("Modelo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            var precioCompraParameter = precioCompra.HasValue ?
                new ObjectParameter("PrecioCompra", precioCompra) :
                new ObjectParameter("PrecioCompra", typeof(decimal));
    
            var precioVentaParameter = precioVenta.HasValue ?
                new ObjectParameter("PrecioVenta", precioVenta) :
                new ObjectParameter("PrecioVenta", typeof(decimal));
    
            var almacenamientoParameter = almacenamiento != null ?
                new ObjectParameter("Almacenamiento", almacenamiento) :
                new ObjectParameter("Almacenamiento", typeof(string));
    
            var garantiaMesesParameter = garantiaMeses.HasValue ?
                new ObjectParameter("GarantiaMeses", garantiaMeses) :
                new ObjectParameter("GarantiaMeses", typeof(int));
    
            var rAMParameter = rAM != null ?
                new ObjectParameter("RAM", rAM) :
                new ObjectParameter("RAM", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            var idColorParameter = idColor.HasValue ?
                new ObjectParameter("IdColor", idColor) :
                new ObjectParameter("IdColor", typeof(int));
    
            var editadoPorParameter = editadoPor.HasValue ?
                new ObjectParameter("EditadoPor", editadoPor) :
                new ObjectParameter("EditadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Producto_Update", idProductoParameter, nombreParameter, modeloParameter, descripcionParameter, stockParameter, precioCompraParameter, precioVentaParameter, almacenamientoParameter, garantiaMesesParameter, rAMParameter, activoParameter, idMarcaParameter, idCategoriaParameter, idColorParameter, editadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Categoria_Create(string nombre, Nullable<bool> activo, Nullable<int> creadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var creadoPorParameter = creadoPor.HasValue ?
                new ObjectParameter("CreadoPor", creadoPor) :
                new ObjectParameter("CreadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Categoria_Create", nombreParameter, activoParameter, creadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Categoria_Delete(Nullable<int> idCategoria, Nullable<int> eliminadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            var eliminadoPorParameter = eliminadoPor.HasValue ?
                new ObjectParameter("EliminadoPor", eliminadoPor) :
                new ObjectParameter("EliminadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Categoria_Delete", idCategoriaParameter, eliminadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Categoria_Update(Nullable<int> idCategoria, string nombre, Nullable<bool> activo, Nullable<int> editadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var editadoPorParameter = editadoPor.HasValue ?
                new ObjectParameter("EditadoPor", editadoPor) :
                new ObjectParameter("EditadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Categoria_Update", idCategoriaParameter, nombreParameter, activoParameter, editadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Cliente_Create(string nombres, string apellidos, string cedula, string correo, string telefono, Nullable<int> idDepartamento, Nullable<int> creadoPor, Nullable<bool> activo, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            var creadoPorParameter = creadoPor.HasValue ?
                new ObjectParameter("CreadoPor", creadoPor) :
                new ObjectParameter("CreadoPor", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cliente_Create", nombresParameter, apellidosParameter, cedulaParameter, correoParameter, telefonoParameter, idDepartamentoParameter, creadoPorParameter, activoParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Cliente_Delete(Nullable<int> idCliente, Nullable<int> eliminadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var eliminadoPorParameter = eliminadoPor.HasValue ?
                new ObjectParameter("EliminadoPor", eliminadoPor) :
                new ObjectParameter("EliminadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cliente_Delete", idClienteParameter, eliminadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Cliente_Update(Nullable<int> idCliente, string nombres, string apellidos, string cedula, string correo, string telefono, Nullable<bool> activo, Nullable<int> editadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var editadoPorParameter = editadoPor.HasValue ?
                new ObjectParameter("EditadoPor", editadoPor) :
                new ObjectParameter("EditadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cliente_Update", idClienteParameter, nombresParameter, apellidosParameter, cedulaParameter, correoParameter, telefonoParameter, activoParameter, editadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Color_Create(string nombre, Nullable<bool> activo, Nullable<int> creadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var creadoPorParameter = creadoPor.HasValue ?
                new ObjectParameter("CreadoPor", creadoPor) :
                new ObjectParameter("CreadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Color_Create", nombreParameter, activoParameter, creadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Color_Delete(Nullable<int> idColor, Nullable<int> eliminadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var idColorParameter = idColor.HasValue ?
                new ObjectParameter("IdColor", idColor) :
                new ObjectParameter("IdColor", typeof(int));
    
            var eliminadoPorParameter = eliminadoPor.HasValue ?
                new ObjectParameter("EliminadoPor", eliminadoPor) :
                new ObjectParameter("EliminadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Color_Delete", idColorParameter, eliminadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Color_Update(Nullable<int> idColor, string nombre, Nullable<bool> activo, Nullable<int> editadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var idColorParameter = idColor.HasValue ?
                new ObjectParameter("IdColor", idColor) :
                new ObjectParameter("IdColor", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var editadoPorParameter = editadoPor.HasValue ?
                new ObjectParameter("EditadoPor", editadoPor) :
                new ObjectParameter("EditadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Color_Update", idColorParameter, nombreParameter, activoParameter, editadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Marca_Create(string nombre, Nullable<bool> activo, Nullable<int> creadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var creadoPorParameter = creadoPor.HasValue ?
                new ObjectParameter("CreadoPor", creadoPor) :
                new ObjectParameter("CreadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Marca_Create", nombreParameter, activoParameter, creadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Marca_Delete(Nullable<int> idMarca, Nullable<int> eliminadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var eliminadoPorParameter = eliminadoPor.HasValue ?
                new ObjectParameter("EliminadoPor", eliminadoPor) :
                new ObjectParameter("EliminadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Marca_Delete", idMarcaParameter, eliminadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Marca_Update(Nullable<int> idMarca, string nombre, Nullable<bool> activo, Nullable<int> editadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var editadoPorParameter = editadoPor.HasValue ?
                new ObjectParameter("EditadoPor", editadoPor) :
                new ObjectParameter("EditadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Marca_Update", idMarcaParameter, nombreParameter, activoParameter, editadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual ObjectResult<sp_FacturaVenta_Create_Result> sp_FacturaVenta_Create(string numeroFactura, Nullable<System.DateTime> fecha, Nullable<decimal> subtotal, Nullable<decimal> impuesto, Nullable<decimal> total, Nullable<int> idCliente, Nullable<int> creadoPor, string detalleFacturaVentaJSON, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var numeroFacturaParameter = numeroFactura != null ?
                new ObjectParameter("NumeroFactura", numeroFactura) :
                new ObjectParameter("NumeroFactura", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var subtotalParameter = subtotal.HasValue ?
                new ObjectParameter("Subtotal", subtotal) :
                new ObjectParameter("Subtotal", typeof(decimal));
    
            var impuestoParameter = impuesto.HasValue ?
                new ObjectParameter("Impuesto", impuesto) :
                new ObjectParameter("Impuesto", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var creadoPorParameter = creadoPor.HasValue ?
                new ObjectParameter("CreadoPor", creadoPor) :
                new ObjectParameter("CreadoPor", typeof(int));
    
            var detalleFacturaVentaJSONParameter = detalleFacturaVentaJSON != null ?
                new ObjectParameter("DetalleFacturaVentaJSON", detalleFacturaVentaJSON) :
                new ObjectParameter("DetalleFacturaVentaJSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FacturaVenta_Create_Result>("sp_FacturaVenta_Create", numeroFacturaParameter, fechaParameter, subtotalParameter, impuestoParameter, totalParameter, idClienteParameter, creadoPorParameter, detalleFacturaVentaJSONParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Proveedor_Create(string nombre, string telefono, string correo, string direccion, Nullable<bool> activo, Nullable<int> creadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var creadoPorParameter = creadoPor.HasValue ?
                new ObjectParameter("CreadoPor", creadoPor) :
                new ObjectParameter("CreadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Proveedor_Create", nombreParameter, telefonoParameter, correoParameter, direccionParameter, activoParameter, creadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Proveedor_Delete(Nullable<int> idProveedor, Nullable<int> eliminadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var eliminadoPorParameter = eliminadoPor.HasValue ?
                new ObjectParameter("EliminadoPor", eliminadoPor) :
                new ObjectParameter("EliminadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Proveedor_Delete", idProveedorParameter, eliminadoPorParameter, isSuccess, errorMsg);
        }
    
        public virtual int sp_Proveedor_Update(Nullable<int> idProveedor, string nombre, string telefono, string correo, string direccion, Nullable<bool> activo, Nullable<int> editadoPor, ObjectParameter isSuccess, ObjectParameter errorMsg)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var editadoPorParameter = editadoPor.HasValue ?
                new ObjectParameter("EditadoPor", editadoPor) :
                new ObjectParameter("EditadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Proveedor_Update", idProveedorParameter, nombreParameter, telefonoParameter, correoParameter, direccionParameter, activoParameter, editadoPorParameter, isSuccess, errorMsg);
        }
    }
}
